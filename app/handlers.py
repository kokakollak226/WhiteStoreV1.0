import os
from dotenv import load_dotenv
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.database.requests as rq
from aiogram import Bot
from aiogram.enums.parse_mode import ParseMode

bot = Bot(token=os.getenv('TG_TOKEN'))



router = Router()

class dialog(StatesGroup):
    sms = State()
    blacklist = State()
    whitelist = State()

class standgold(StatesGroup):
    id = State()
    gold = State()
    bank = State()
    verify = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(None)
    await rq.set_user(message.from_user.id)
    await message.answer(f'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                        f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>,\n'
                        f'üî¢–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n'
                        f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´üíµ <b>–ö—É–ø–∏—Ç—å</b>¬ª.\n'
                        f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.',parse_mode='HTML', reply_markup=kb.main)
    
    
@router.message(F.text == 'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(None)
    await message.answer(f'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                        f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>,\n'
                        f'üî¢–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n'
                        f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´üíµ <b>–ö—É–ø–∏—Ç—å</b>¬ª.\n'
                        f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.',parse_mode='HTML', reply_markup=kb.main)

@router.message(F.text == 'üíµ–ö—É–ø–∏—Ç—å')
async def buy(message: Message, state: FSMContext):
    await state.set_state(standgold.gold)
    await message.answer(f'üçØ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –≥–æ–ª–¥—É, \n–≤–≤–µ–¥–∏ –≤ —á–∞—Ç <b>—Å—É–º–º—É –≤ ‚ÇΩ—É–±–ª—è—Ö</b>\n–Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. \n üí° <b>–ù–∞–ø—Ä–∏–º–µ—Ä</b>: <ins>100</ins>',parse_mode='HTML', reply_markup=kb.menu)
    
    
@router.message(standgold.gold)
async def sum(message: Message, state: FSMContext):    
    try:
        golds = int(message.text)
        rub = int(golds)
        if rub >= 100:
            golda = round(golds / 0.66, 2)
            await state.update_data(gold=message.text)
            await message.answer(f'üìù –ó–∞ <b>{rub}</b>‚ÇΩ –ø–æ–ª—É—á–∞–µ—à—å <b>{golda}</b>G. \n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ç–µ–±–µ \n—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',parse_mode='HTML', reply_markup=kb.bank) 
            await state.set_state(standgold.bank)
        else:
            await message.answer(f'‚ôªÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –º–∏–Ω–∏–º—É–º <b>100</b>‚ÇΩ', parse_mode='HTML')
    except Exception:
        await message.answer('ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \n<b>/start</b>', parse_mode='HTML')
    
@router.callback_query(F.data == 'Back', standgold.bank)
async def Back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üìù –ó–∞ <b>{golda}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{round(golda / 0.66, 2)}G</b>. \n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ç–µ–±–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', parse_mode='HTML', reply_markup=kb.bank)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')
    

@router.callback_query(F.data == 'Edit', standgold.bank)
async def Back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üìù –ó–∞ <b>{golda}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{round(golda / 0.66, 2)}G</b>. \n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ç–µ–±–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',parse_mode='HTML', reply_markup=kb.bank)


@router.callback_query(F.data == 'SBP', standgold.bank)
async def SBP(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='‚ö™Ô∏è–°–ë–ü‚ö™Ô∏è')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üì±–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü‚ö™Ô∏è: +79087976609\n'
                                  f'üí≥–ë–∞–Ω–∫ <b>–¢–∏–Ω—å–∫–æ—Ñ—Ñ</b>(–¢.–ë–∞–Ω–∫)\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å <b>-–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö</b>.\n'
                                  f'üí∞ –°—É–º–º–∞: <b>{golda}</b>‚ÇΩ\n'
                                  f'üçØ <ins>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å</ins>.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: <b>{round(golda / 0.66, 2)}</b>G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, <b>–Ω–∞–∂–º–∏—Ç–µ</b> ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª',parse_mode='HTML', reply_markup=kb.Verify)
    
    

@router.callback_query(F.data == 'Sberbank', standgold.bank)
async def Sberbank(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üü¢SBERBANKüü¢')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥–ö–∞—Ä—Ç–∞üü¢: <b>2202202013277409</b>\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å <b>-–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö</b>.\n'
                                  f'üí∞ –°—É–º–º–∞: <b>{golda}</b>‚ÇΩ\n'
                                  f'üçØ <ins>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å</ins>.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: <b>{round(golda / 0.66, 2)}</b>G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, <b>–Ω–∞–∂–º–∏—Ç–µ</b> ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª',parse_mode='HTML', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Tinkoff', standgold.bank)
async def Tinkoff(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üü°Tinkoffüü°')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥–ö–∞—Ä—Ç–∞üü°: <b>2200700817593386</b>\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å <b>-–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö</b>.\n'
                                  f'üí∞ –°—É–º–º–∞: <b>{golda}</b>‚ÇΩ\n'
                                  f'üçØ <ins>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å</ins>.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: <b>{round(golda / 0.66, 2)}</b>G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, <b>–Ω–∞–∂–º–∏—Ç–µ</b> ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª',parse_mode='HTML', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Alfa', standgold.bank)
async def Alfa(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üî¥ALFAüî¥')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥–ö–∞—Ä—Ç–∞üî¥: <b>2200150818007889</b>\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å <b>-–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö</b>.\n'
                                  f'üí∞ –°—É–º–º–∞: <b>{golda}</b>‚ÇΩ\n'
                                  f'üçØ <ins>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å</ins>.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: <b>{round(golda / 0.66, 2)}</b>G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, <b>–Ω–∞–∂–º–∏—Ç–µ</b> ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª',parse_mode='HTML', reply_markup=kb.Verify)
  

@router.callback_query(F.data == 'Vtb', standgold.bank)
async def Vtb(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üîµ–í–¢–ëüîµ')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥–ö–∞—Ä—Ç–∞üîµ: <b>2200246001639031</b>\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å <b>-–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö</b>.\n'
                                  f'üí∞ –°—É–º–º–∞: <b>{golda}</b>‚ÇΩ\n'
                                  f'üçØ <ins>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å</ins>.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: <b>{round(golda / 0.66, 2)}</b>G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, <b>–Ω–∞–∂–º–∏—Ç–µ</b> ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª',parse_mode='HTML', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Verify')
async def verify(callback: CallbackQuery, state: FSMContext):
    await state.update_data(id = callback.from_user.username)
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.edit_text('üì∏–°–∫–∏–Ω—å—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b>', parse_mode='HTML')
    await callback.message.answer('‚ÅâÔ∏è <b>–í–∞–∂–Ω–æ</b>: –Ω–µ –æ–±—Ä–µ–∑–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –Ω–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ <b>–¥–∞—Ç—É</b>, <b>–≤—Ä–µ–º—è</b> –∏ <b>–ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>.', parse_mode='HTML')
    await state.set_state(standgold.verify)



@router.message(standgold.verify, F.photo)
async def screen(message:Message, state:FSMContext):
    await state.update_data(verify=message.photo[-1].file_id)
    await message.answer('‚úÖ<b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>', parse_mode='HTML')
    await message.answer('üíµ–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
    await state.set_state(None)
    data = await state.get_data()
    golda = int(data['gold'])
    id = data['id']
    await bot.send_photo(chat_id=os.getenv('ADMIN_VORTEX'), photo=data['verify'], caption=f'id:{id}\nüíµ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞üíµ \nüíµ<b>{golda}</b> RUB\nüçØ<b>{round(golda / 0.66, 2)}</b> Gold\nüíµBank: <b>{data['bank']}</b>',parse_mode='HTML', reply_markup=kb.ok)

@router.callback_query(F.data == 'Ok')
async def Ok(callback: CallbackQuery, state: FSMContext):
    await callback.answer('‚úÖ–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!')
    await bot.send_message(chat_id=id, text=f'–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç, –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {golda} –†—É–±–ª–µ–π')
    await callback.message.delete()

@router.callback_query(F.data == 'Cancel')
async def Cancel(callback: CallbackQuery):
    await callback.answer('üö´–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω')
    await callback.message.delete()

@router.callback_query(F.data == 'Problem')
async def problem(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.edit_text(f'‚ÅâÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏,' 
                                  f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>,\n'
                                  f'üí°–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´‚ö™Ô∏è–°–ë–ü | –î—Ä—É–≥–æ–π –±–∞–Ω–∫¬ª.\n\n'
                                  f'–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å, <b>–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</b> ‚§µÔ∏è',parse_mode='HTML', reply_markup=kb.Faq)

@router.message()
async def send_echo(message: Message):
    await message.answer(f'ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ\n /start')

