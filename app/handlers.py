from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import time

router = Router()

class standgold(StatesGroup):
    gold = State()
    bank = State()
    verify = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    state.clear
    await message.answer(f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name},\n üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                        f'üî¢–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n'
                        f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´üíµ –ö—É–ø–∏—Ç—å¬ª.\n'
                        f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', reply_markup=kb.main)
    
    
@router.message(F.text == 'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd_start(message: Message, state: FSMContext):
    state.clear
    await message.answer(f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name},\n üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                        f'üî¢–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n'
                        f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´üíµ –ö—É–ø–∏—Ç—å¬ª.\n'
                        f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', reply_markup=kb.main)
    


@router.message(F.text == 'üíµ–ö—É–ø–∏—Ç—å')
async def buy(message: Message, state: FSMContext):
    await state.set_state(standgold.gold)
    await message.answer(f'üçØ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –≥–æ–ª–¥—É, –≤–≤–µ–¥–∏ –≤ —á–∞—Ç —Å—É–º–º—É ‚ÇΩ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. \n üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 100', reply_markup=kb.menu)
    
    
@router.message(standgold.gold)
async def sum(message: Message, state: FSMContext):    
    try:
        golds = int(message.text)
        rub = int(golds)
        golda = round(golds / 0.66, 2)
        await state.update_data(gold=message.text)
        await message.answer(f'üìù –ó–∞ {rub} ‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {golda} –≥–æ–ª–¥—ã. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ç–µ–±–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=kb.bank) 
        await state.set_state(standgold.bank)
    except Exception:
        message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    
@router.callback_query(F.data == 'Back')
async def Back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üìù –ó–∞ {golda} ‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {round(golda / 0.66, 2)} –≥–æ–ª–¥—ã. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ç–µ–±–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=kb.bank)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')
    await callback.message.delete()

@router.callback_query(F.data == 'Edit')
async def Back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üìù –ó–∞ {golda} ‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {round(golda / 0.66, 2)} –≥–æ–ª–¥—ã. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ç–µ–±–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=kb.bank)
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
    await callback.message.delete()

@router.callback_query(F.data == 'SBP')
async def SBP(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üì±–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü‚ö™Ô∏è: +79087976609\n'
                                  f'üí≥–ë–∞–Ω–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ(–¢.–ë–∞–Ω–∫)\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö.\n'
                                  f'üí∞ –°—É–º–º–∞: {golda} ‚ÇΩ\n'
                                  f'üçØ –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: {round(golda / 0.66, 2)}G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª', reply_markup=kb.Verify)
    await callback.message.delete()
    

@router.callback_query(F.data == 'Sberbank')
async def Sberbank(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üí≥–ö–∞—Ä—Ç–∞üü¢: 2202202013277409\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö.\n'
                                  f'üí∞ –°—É–º–º–∞: {golda} ‚ÇΩ\n'
                                  f'üçØ –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: {round(golda / 0.66, 2)}G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª', reply_markup=kb.Verify)
    await callback.message.delete()

@router.callback_query(F.data == 'Tinkoff')
async def Tinkoff(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üí≥–ö–∞—Ä—Ç–∞üü°: 2200700817593386\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö.\n'
                                  f'üí∞ –°—É–º–º–∞: {golda} ‚ÇΩ\n'
                                  f'üçØ –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: {round(golda / 0.66, 2)}G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª', reply_markup=kb.Verify)
    await callback.message.delete()

@router.callback_query(F.data == 'Alfa')
async def Alfa(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üí≥–ö–∞—Ä—Ç–∞üî¥: 2200150818007889\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö.\n'
                                  f'üí∞ –°—É–º–º–∞: {golda} ‚ÇΩ\n'
                                  f'üçØ –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: {round(golda / 0.66, 2)}G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª', reply_markup=kb.Verify)
    await callback.message.delete()

@router.callback_query(F.data == 'Vtb')
async def Vtb(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.answer(f'üí≥–ö–∞—Ä—Ç–∞üîµ: 2200246001639031\n'
                                  f'‚ùóÔ∏è–ü–æ–ª—É—á–∞—Ç–µ–ª—å -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö.\n'
                                  f'üí∞ –°—É–º–º–∞: {golda} ‚ÇΩ\n'
                                  f'üçØ –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å.\n'
                                  f'‚ôªÔ∏è–í–∞–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ: {round(golda / 0.66, 2)}G\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª¬ª', reply_markup=kb.Verify)
    await callback.message.delete()

@router.callback_query(F.data == 'Verify')
async def verify(callback: CallbackQuery, state: FSMContext):
    #await state.set_state(standgold.verify)
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.answer('üì∏–°–∫–∏–Ω—å—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞')
    await callback.message.answer('‚ÅâÔ∏è –í–∞–∂–Ω–æ: –Ω–µ –æ–±—Ä–µ–∑–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –Ω–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.')
    await callback.message.delete()

@router.callback_query(F.data == 'Problem')
async def problem(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.answer(f'‚ÅâÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏,' 
                                  f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã,\n'
                                  f'üí°–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´‚ö™Ô∏è–°–ë–ü | –î—Ä—É–≥–æ–π –±–∞–Ω–∫¬ª.\n\n'
                                  f'–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚§µÔ∏è', reply_markup=kb.Faq)
    await callback.message.delete()


@router.message()
async def send_echo(message: Message):
    await message.answer(f'ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start')