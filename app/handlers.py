import os
from dotenv import load_dotenv
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from app.database.models import User
import app.keyboards as kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.database.requests as rq
from app.database.requests import Profile, Profiles, orm_get_orders, orm_get_order, delete_order, orm_order, orm_update_balance, user_balance
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot


router = Router()

class dialog(StatesGroup):
    sms = State()
    blacklist = State()
    whitelist = State()

class standgold(StatesGroup):
    tg_name = State()
    tg_id = State()
    rub = State()
    gold = State()
    bank = State()
    image = State()
    order_change = None


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    await state.set_state(None)
    await rq.orm_add_user(session, message.from_user.id, 0)
    await message.answer(f'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                        f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>\n\n'
                        f'üì±–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è \n-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n'
                        f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ G–æ–ª–¥—ã\n-–Ω–∞–∂–º–∏—Ç–µ ¬´üíµ <b>–ö—É–ø–∏—Ç—å</b>¬ª.\n\n'
                        f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.',parse_mode='HTML', reply_markup=kb.main)
    if message.from_user.id == int(os.getenv('ADMIN_VORTEX')):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kb.main_admin)

@router.message(F.text == 'üëë–ê–¥–º–∏–Ω–∫–∞')
async def admin(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id == int(os.getenv('ADMIN_VORTEX')):
        await message.answer('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=kb.Admin)
        await state.clear()
    else: 
        await message.answer('ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ\n /start')

@router.message(F.text == 'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(None)
    await message.answer(f'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                        f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>\n\n'
                        f'üì±–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è \n-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n'
                        f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ G–æ–ª–¥—ã\n-–Ω–∞–∂–º–∏—Ç–µ ¬´üíµ <b>–ö—É–ø–∏—Ç—å</b>¬ª.\n\n'
                        f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.',parse_mode='HTML', reply_markup=kb.main)
    if message.from_user.id == int(os.getenv('ADMIN_VORTEX')):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kb.main_admin)

@router.message(F.text == 'üíµ–ö—É–ø–∏—Ç—å')
async def buy(message: Message, state: FSMContext):
    await state.set_state(standgold.gold)
    await message.answer(f'üçØ–í–≤–µ–¥–∏ –≤ —á–∞—Ç <b>—Å—É–º–º—É –≤ –†—É–±–ª—è—Ö</b>\n–Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. \n üí° <b>–ù–∞–ø—Ä–∏–º–µ—Ä</b>: <b>üíµ100‚ÇΩ</b> = <b>üçØ151.52G</b>',parse_mode='HTML', reply_markup=kb.menu)
    
@router.message(F.text == 'üÜî–ü—Ä–æ—Ñ–∏–ª—å')
async def buy(message: Message, state: FSMContext, session: AsyncSession):
    tg_id = message.from_user.id
    balance = await user_balance(session=session, tg_id=tg_id)
    profile = await Profile(session=session, tg_id=tg_id)
    await message.answer(f'üÜî:*{profile}*\nüçØ*–ë–∞–ª–∞–Ω—Å*:*{round(balance / 0.66, 2)}*\n\nüî•–í–∞—à —Ä–∞–Ω–≥: *–ù–æ–≤–∏—á–µ–∫*', parse_mode='Markdown')

@router.message(standgold.gold)
async def sum(message: Message, state: FSMContext):    
    try:
        golds = int(message.text)
        rub = int(golds)
        if rub >= 100:
            golda = round(golds / 0.66, 2)
            await state.update_data(gold=message.text)
            await message.answer(f'üìù –ó–∞ <b>{rub}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{golda}G</b>. \n<b>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>:',parse_mode='HTML', reply_markup=kb.bank) 
            await state.set_state(standgold.bank)
        else:
            await message.answer(f'‚ôªÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –º–∏–Ω–∏–º—É–º <b>100</b>‚ÇΩ', parse_mode='HTML')
    except Exception:
        await message.answer('ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \n<b>/start</b>', parse_mode='HTML')
    
@router.callback_query(F.data == 'Back')
async def Back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üìù –ó–∞ <b>{golda}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{round(golda / 0.66, 2)}G</b>. \n<b>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>:', parse_mode='HTML', reply_markup=kb.bank)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')
    

@router.callback_query(F.data == 'Edit')
async def Back(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üìù –ó–∞ <b>{golda}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{round(golda / 0.66, 2)}G</b>. \n<b>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>:',parse_mode='HTML', reply_markup=kb.bank)


@router.callback_query(F.data == 'SBP')
async def SBP(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='‚ö™Ô∏è–°–ë–ü‚ö™Ô∏è')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üì±*–ù–æ–º–µ—Ä –°–ë–ü*‚ö™Ô∏è: *+79087976609*\n'
                                  f'üí≥*–ë–∞–Ω–∫*: *–¢–∏–Ω—å–∫–æ—Ñ—Ñ*(–¢.–ë–∞–Ω–∫)\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / 0.66, 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)

    

@router.callback_query(F.data == 'Sberbank')
async def Sberbank(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üü¢SBERBANKüü¢')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üü¢: *2202202013277409*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / 0.66, 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Tinkoff')
async def Tinkoff(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üü°Tinkoffüü°')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üü°: *2200700817593386*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / 0.66, 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Alfa')
async def Alfa(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üî¥ALFAüî¥')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üî¥: *2200150818007889*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / 0.66, 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Vtb')
async def Vtb(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üîµ–í–¢–ëüîµ')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üîµ: *2200246001639031*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / 0.66, 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Verify')
async def verify(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.edit_text('üì∏–°–∫–∏–Ω—å—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b>', parse_mode='HTML')
    await callback.message.answer('‚ÅâÔ∏è <b>–í–∞–∂–Ω–æ</b>: –Ω–µ –æ–±—Ä–µ–∑–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –Ω–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ <b>–¥–∞—Ç—É</b>, <b>–≤—Ä–µ–º—è</b> –∏ <b>–ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>.', parse_mode='HTML')
    await state.set_state(standgold.image)


@router.message(standgold.image, F.photo)
async def screen(message:Message, state:FSMContext, bot: Bot, session: AsyncSession):
    await state.update_data(image=message.photo[-1].file_id)
    if message.from_user.username != None:
        await state.update_data(tg_name=message.from_user.username)
    else:
        await state.update_data(tg_name = 'Noname')
    await state.update_data(tg_id = message.from_user.id)
    try:
        data = await state.get_data()
        await orm_order(session, data)
        await message.answer('‚úÖ<b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>', parse_mode='HTML')
        await message.answer('üíµ–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏(–¥–æ 48–ß)')
        await bot.send_message(chat_id=os.getenv('ADMIN_VORTEX'), text=f'üíµ*–ó–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*', parse_mode='Markdown')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        await state.set_state(None)
    await state.clear()

@router.callback_query(F.data == 'Problem')
async def problem(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.edit_text(f'‚ÅâÔ∏è–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n' 
                                  f'‚ú®–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>,\n'
                                  f'üí°<b>–ù–∞–ø—Ä–∏–º–µ—Ä</b> ¬´‚ö™Ô∏è–°–ë–ü | –î—Ä—É–≥–æ–π –±–∞–Ω–∫¬ª.\n\n'
                                  f'ü´£–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å, <b>–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> ‚§µÔ∏è',parse_mode='HTML', reply_markup=kb.Faq)

@router.callback_query(F.data == 'orders')
async def Order(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('‚úÖ–ó–∞–∫–∞–∑—ã!')
    count = 0
    for order in await orm_get_orders(session):
        count += 1
        await callback.message.answer_photo(
            order.image,
            caption=f'üíµ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞üíµ\n\n'
            f'*id*:`@{order.tg_name}`\n'
            f'*bank*:{order.bank}\n'
            f'üíµ{order.price_rub}RUB\n'
            f'üçØ{round(order.price_gold, 2)}\n',
            parse_mode='Markdown',
            reply_markup=kb.get_callback_btns(
                btns={
                    "–ü—Ä–∏–Ω—è—Ç—å": f"ok_{order.id}",
                    "–û—Ç–∫–ª–æ–Ω–∏—Ç—å": f"delete_{order.id}",
                }
            ),
        )
    await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ *{count}* ‚ÅâÔ∏è", parse_mode='Markdown')


@router.callback_query(F.data.startswith('ok_'))
async def Ok(callback: CallbackQuery, bot: Bot, state: FSMContext, session: AsyncSession):
    order_id = callback.data.split("_")[-1]
    order_change = await orm_get_order(session, int(order_id))
    standgold.order_change=order_change
    await orm_update_balance(session=session, user_tg_id=int(order_change.tg_id), balance=int(order_change.price_rub))
    await bot.send_message(chat_id=order_change.tg_id, text=f'‚úÖ*–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç*. \n\n*–≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ*: \nüíµ`{order_change.price_rub}` *RUB* : üçØ*{round(order_change.price_gold, 2)} GOLD*', parse_mode='Markdown')
    await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
    await delete_order(session, int(order_id))
    await callback.message.delete()

@router.callback_query(F.data.startswith("delete_"))
async def delete_ord(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    order_id = callback.data.split("_")[-1]
    order_change = await orm_get_order(session, int(order_id))
    standgold.order_change=order_change
    await bot.send_message(chat_id=order_change.tg_id, text=f'‚ÅâÔ∏è*–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É* `{order_change.price_rub}` *RUB –æ—Ç–∫–ª–æ–Ω—ë–Ω*\n\n*‚ùó–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*', parse_mode='Markdown')
    await delete_order(session, int(order_id))
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)
    await callback.message.delete()
    
@router.callback_query(F.data == 'sms')
async def sms(callback:CallbackQuery, state: FSMContext):
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(dialog.sms)

@router.message(dialog.sms, F.text)
async def spam(message: Message, state:FSMContext, session: AsyncSession, bot:Bot):
    text = message.text
    tgid = await Profiles(session=session)
    for i in tgid:
        await bot.send_message(chat_id=i, text=text)
    await message.answer('SMS –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º')

@router.message()
async def send_echo(message: Message):
    await message.answer(f'ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ\n /start')

