import os
import asyncio
import random
from dotenv import load_dotenv
from aiogram import F, Router
from aiogram.filters import CommandStart, or_f
from aiogram.types import Message, CallbackQuery
from app.database.models import User
import app.keyboards as kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database.requests import adm_id, check_banned, check_name_ban, orm_add_course, orm_add_skin, orm_add_user, Profile, Profiles, adm_list, check_adm, check_ban, check_lvl, check_name, check_what_ban, delete_admin, delete_all_order, delete_all_order_gold, delete_ban, delete_order_gold, delete_user, orm_add_admin, orm_all_order, orm_all_order_gold, orm_all_orders_gold, orm_ban, orm_check_course, orm_check_skin, orm_check_skin_screen, orm_get_all_orders, orm_get_order_gold, orm_get_orders, orm_get_order, delete_order, orm_get_orders_gold, orm_get_orders_gold_error, orm_get_orders_gold_id, orm_get_orders_id, orm_get_yes_orders, orm_order, orm_order_gold, orm_update_balance, orm_update_balance_gold, orm_update_course, orm_update_skin, orm_yes_order, orm_yes_order_gold, orm_yes_orders_gold, user_balance, user_balance_ban, user_list
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
from aiogram.types import InputMediaPhoto
from aiogram.utils.media_group import MediaGroupBuilder


router = Router()

class course(StatesGroup):
    new = State()

class Change_skin(StatesGroup):
    new_skin = State()
    skin_screen = State()

class statistic(StatesGroup):
    all_users = State()

class what(StatesGroup):
    whats = State()

class bonus(StatesGroup):
    give = State()
    users = State()

class ban(StatesGroup):
    ban = State()
    unban = State()
    what_ban = State()

class admin_set(StatesGroup):
    adm_set = State()
    add = State()
    delete = State()


class dialog(StatesGroup):
    order_rub = State()
    count = State()
    skin = State()
    sms = State()
    text = State()
    photo = State()
    blacklist = State()
    whitelist = State()

class standgold(StatesGroup):
    tg_name = State()
    tg_id = State()
    rub_course = State()
    rub = State()
    gold = State()
    bank = State()
    image = State()
    order_change = None

class order_golds(StatesGroup):
    translate = State()
    gold_course = State()
    screenshot_skin = State()
    order_verify = None

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    if await check_ban(session, message.from_user.id) != None:
        what = await check_what_ban(session, message.from_user.id)
        await message.answer(f'*–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {what}*',reply_markup=kb.remove ,parse_mode='Markdown')
    else:
        await state.set_state(None)
        if message.from_user.username != None:
            name = message.from_user.username
        else:
            name = 'Noname'
        await orm_add_user(session, message.from_user.id, name, 0, 0)
        await message.answer(f'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                            f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>\n\n'
                            f'üì±–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è \n-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n'
                            f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ G–æ–ª–¥—ã\n-–Ω–∞–∂–º–∏—Ç–µ ¬´üíµ <b>–ö—É–ø–∏—Ç—å</b>¬ª.\n\n'
                            f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.',parse_mode='HTML', reply_markup=kb.main)
        if message.from_user.id == (int(os.getenv('ADMIN'))):
            await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kb.main_admin)
        elif await check_adm(session, message.from_user.id) != None:
            await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kb.main_admin)


@router.message(F.text == 'üëë–ê–¥–º–∏–Ω–∫–∞')
async def admin(message: Message, state: FSMContext, session: AsyncSession):
    if message.from_user.id == (int(os.getenv('ADMIN'))):
        await message.answer('‚ùóÔ∏è*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é*', parse_mode='Markdown', reply_markup=kb.Admin)
    elif await check_adm(session, message.from_user.id) != None:
        await message.answer('‚ùóÔ∏è*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é*', parse_mode='Markdown', reply_markup=kb.Admin)
        await state.clear()
    else: 
        await message.answer('ü§ñ—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ\n /start')

@router.message(F.text == 'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext, session: AsyncSession):
    if await check_ban(session, message.from_user.id) != None:
        what = await check_what_ban(session, message.from_user.id)
        await message.answer(f'*–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {what}*',reply_markup=kb.remove ,parse_mode='Markdown')
    else:
        await state.set_state(None)
        await message.answer(f'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'
                            f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>\n\n'
                            f'üì±–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è \n-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n'
                            f'‚ö°Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ G–æ–ª–¥—ã\n-–Ω–∞–∂–º–∏—Ç–µ ¬´üíµ <b>–ö—É–ø–∏—Ç—å</b>¬ª.\n\n'
                            f'üìñ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –≤ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.',parse_mode='HTML', reply_markup=kb.main)
        if message.from_user.id == (int(os.getenv('ADMIN'))):
            await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kb.main_admin)
        elif await check_adm(session, message.from_user.id) != None:
            await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kb.main_admin)

@router.message(F.text == 'üçØ–ü—Ä–æ–¥–∞—Ç—å')
async def sell_gold(message: Message):
    await message.answer('‚ùóÔ∏è*–í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—É–ø–∞–µ–º G —á–µ—Ä–µ–∑ –ª—Å*',parse_mode='Markdown', reply_markup=kb.url_adm)

@router.message(F.text == 'üíµ–ö—É–ø–∏—Ç—å')
async def buy(message: Message, state: FSMContext, session: AsyncSession):
    try:
        tg_id = message.from_user.id
        profile = await Profile(session=session, tg_id=tg_id)
        if profile != None:
            for order in await orm_get_orders(session):
                error = len(await orm_get_orders_id(session, order.tg_id)) 
                if error > 7:
                    await delete_all_order(session, order.tg_id)
                    await message.answer('‚ùóÔ∏è*–ó–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞ –±–∞–≥–æ—é–∑*', parse_mode='Markdown')
                    break
                elif error >= 5 and error <= 7:
                    await message.answer('‚ùóÔ∏è*–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\nüí°–ü—Ä–∏—á–∏–Ω–∞: –ë–∞–≥–æ—é–∑*', parse_mode='Markdown')
                    await state.clear()
                    break
            else:
                course = await orm_check_course(session)
                await state.update_data(rub_course=float(course))
                await state.set_state(standgold.gold)
                await message.answer(f'üçØ–í–≤–µ–¥–∏ –≤ —á–∞—Ç <b>—Å—É–º–º—É</b>\n–Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. \n üí° <b>–ù–∞–ø—Ä–∏–º–µ—Ä</b>: <b>üíµ100</b> = <b>üçØ{round(100 / course, 2)}G</b>',parse_mode='HTML', reply_markup=kb.menu)
        else:
            await message.answer('*–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å \n/start*', parse_mode="Markdown")
    except Exception:
        await message.answer('*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ\n/start*', parse_mode='Markdown')

@router.message(F.text == '‚ö°Ô∏è–í—ã–≤–µ—Å—Ç–∏')
async def ordered(message: Message, state: FSMContext, session: AsyncSession):
    await state.clear()
    tg_id = message.from_user.id
    profile = await Profile(session=session, tg_id=int(tg_id))
    if profile != None:
        for order in await orm_get_orders_gold(session):
            error = len(await orm_get_orders_gold_id(session, order.tg_id)) 
            if error == 1:
                await message.answer('‚ùóÔ∏è*–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥*', parse_mode='Markdown')
                break
            elif error >= 2 and error <= 3:
                await message.answer('‚ùóÔ∏è*–í—ã–≤–æ–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\nüí°–ü—Ä–∏—á–∏–Ω–∞: –ë–∞–≥–æ—é–∑*', parse_mode='Markdown')
                break
            elif error > 3:
                await delete_all_order_gold(session, order.tg_id)
                await message.answer('‚ùóÔ∏è*–ó–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞ –±–∞–≥–æ—é–∑*', parse_mode='Markdown')
                break
                
        else:
            await state.set_state(order_golds.translate)
            curse = await orm_check_course(session)
            await state.update_data(gold_course = float(curse))
            await message.answer(f'üçØ–í–≤–µ–¥–∏ –≤ —á–∞—Ç *—Å—É–º–º—É Gold*\n–∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏. \n üí° *–ù–∞–ø—Ä–∏–º–µ—Ä*: üçØ`100`',parse_mode='Markdown', reply_markup=kb.menu)
    else:
        await message.answer('*–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å\n/start*', parse_mode='Markdown')

@router.message(order_golds.translate, F.text)
async def translate(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    tg_id = message.from_user.id
    balance = await user_balance(session=session, tg_id=tg_id)
    try:
        golda = int(message.text)
        skin = await orm_check_skin_screen(session)
        try:
            if golda < 50 and golda > 0:
                await message.answer('*–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞*: \nüçØ`50` *GOLD*', parse_mode='Markdown')
            elif golda <= balance and golda > 0:
                await state.update_data(translate=golda)
                await bot.send_photo(chat_id=message.chat.id, 
                                        photo=skin, 
                                        caption=
                                            f'*ü•≥–û—Ç–ª–∏—á–Ω–æ, –¥–∞–ª–µ–µ –≤—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∫–∏–Ω*: `{await orm_check_skin(session)}`'
                                            f'\n\nüçØ*–∑–∞* `{golda * 1.25 + 0.01}`*G*'
                                            f'\n\n‚ùó*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {await orm_check_skin(session)}*'
                                            f'\n\nüí°*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*: *–†—ã–Ω–æ–∫* -> *–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã* -> *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É*'
                                            f'\n\n‚ùó*–í–ê–ñ–ù–û*: *–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É —Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã*'
                                            f'\n‚ùó*–ö–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ*', parse_mode='Markdown')
                await state.set_state(order_golds.screenshot_skin)
            elif golda < 0:
                await message.answer('‚ôªÔ∏è*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ*\nüí°*–ù–∞–ø—Ä–∏–º–µ—Ä*: üçØ`100`', parse_mode='Markdown')
            else:
                await message.answer(f'‚ùó*–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ*\n*üçØ–í–∞—à –±–∞–ª–∞–Ω—Å*: `{round(balance, 2)}` *GOLD*', parse_mode='Markdown')
        except Exception:
            await message.answer('ü§ñ*—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \n/start*', parse_mode='Markdown')
    except Exception:
        await message.answer('‚ùó*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ*', parse_mode='Markdown')
        await message.answer(f'üí°*–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞*: `{int(balance)}`', parse_mode='Markdown')
    

@router.message(order_golds.screenshot_skin, F.photo)
async def translate(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    await state.update_data(screenshot_skin=message.photo[-1].file_id)
    if message.from_user.username != None:
        await state.update_data(tg_name=message.from_user.username)
    else:
        await state.update_data(tg_name = 'Noname')
    await state.update_data(tg_id = message.from_user.id)
    try:
        for adm in await adm_id(session):
            if await check_lvl(session, adm) >= 2:
                await bot.send_message(chat_id=adm, text=f'üçØ*–ó–∞–∫–∞–∑ –Ω–∞ –≤—ã–≤–æ–¥*', parse_mode='Markdown')
        data = await state.get_data()
        await orm_order_gold(session, data)
        await orm_all_order_gold(session, data)
        await message.answer(f'‚úÖ*–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ*', parse_mode='Markdown', reply_markup=kb.menu)
        await message.answer('üçØ*GOLD –ø–æ—Å—Ç—É–ø–∏—Ç –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏*\n(*–¥–æ* `48`*–ß*, *–Ω–æ –æ–±—ã—á–Ω–æ —É—Å–ø–µ–≤–∞–µ–º –º–µ–Ω–µ–µ —á–µ–º –∑–∞* `1` *—á*)', parse_mode='Markdown')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        await state.set_state(None)
    await state.clear()


@router.message(F.text == 'üÜî–ü—Ä–æ—Ñ–∏–ª—å')
async def buy(message: Message, session: AsyncSession):
    tg_id = message.from_user.id
    try:
        balance = await user_balance(session=session, tg_id=tg_id)
        profile = await Profile(session=session, tg_id=tg_id)
        if profile != None:
            await message.answer(f'üÜî: *{profile}*\nüçØ*–ë–∞–ª–∞–Ω—Å*: *{round(float(balance), 2)}* G\n\nüî•–í–∞—à —Ä–∞–Ω–≥: *–ù–æ–≤–∏—á–µ–∫*', parse_mode='Markdown')
        else:
            await message.answer('*–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å\n /start*', parse_mode='Markdown')
    except Exception:
        await message.answer('*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/start*', parse_mode='Markdown')

@router.message(F.text == 'üéÆ–ò–≥—Ä—ã')
async def game(message: Message):
    await message.answer('*–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*', parse_mode='Markdown')

@router.message(F.text == 'üìñ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def faq(message:Message):
    await message.answer('üìñ–ò–Ω—Ñ–æ:', reply_markup=kb.fq)

@router.callback_query(F.data == 'curse')
async def curse(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer()
    await callback.message.answer(f'‚ùóÔ∏è*–î–æ –∑–∞–∫—É–ø–∞ –∫—É—Ä—Å*: `0.75`-`0.78` \nüöÄ*–ø–æ—Å–ª–µ –∑–∞–∫—É–ø–∞*: `0.63`-`0.69`', parse_mode='Markdown')

@router.message(standgold.gold, F.text)
async def sum(message: Message, state: FSMContext, session: AsyncSession):    
    try:
        golds = int(message.text)
        rub = int(golds)
        if rub >= 50:
            data = await state.get_data()
            golda = round(golds / data["rub_course"], 2)
            await state.update_data(gold=message.text)
            await message.answer(f'üìù –ó–∞ <b>{rub}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{golda}G</b>. \n<b>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>:',parse_mode='HTML', reply_markup=kb.bank) 
            await state.set_state(standgold.bank)
        else:
            await message.answer(f'‚ôªÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –º–∏–Ω–∏–º—É–º <b>50</b>‚ÇΩ', parse_mode='HTML')
    except Exception:
        await message.answer('ü§ñ*—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \n/start*', parse_mode='Markdown')
    
@router.callback_query(F.data == 'Back')
async def Back(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üìù –ó–∞ <b>{golda}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{round(golda / data["rub_course"], 2)}G</b>. \n<b>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>:', parse_mode='HTML', reply_markup=kb.bank)
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')
    
@router.callback_query(F.data == 'Edit')
async def Back(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üìù –ó–∞ <b>{golda}</b>‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>{round(golda / data["rub_course"], 2)}G</b>. \n<b>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>:',parse_mode='HTML', reply_markup=kb.bank)

@router.callback_query(F.data == 'SBP')
async def SBP(callback: CallbackQuery, state:FSMContext, session: AsyncSession):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='‚ö™Ô∏è–°–ë–ü‚ö™Ô∏è')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üì±*–ù–æ–º–µ—Ä –°–ë–ü*‚ö™Ô∏è: *+79087976609*\n'
                                  f'üí≥*–ë–∞–Ω–∫*: *–¢–∏–Ω—å–∫–æ—Ñ—Ñ*(–¢.–ë–∞–Ω–∫)\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / data["rub_course"], 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)

@router.callback_query(F.data == 'Sberbank')
async def Sberbank(callback: CallbackQuery, state:FSMContext, session: AsyncSession):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üü¢SBERBANKüü¢')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üü¢: *2202202013277409*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / data["rub_course"], 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)

@router.callback_query(F.data == 'Tinkoff')
async def Tinkoff(callback: CallbackQuery, state:FSMContext, session: AsyncSession):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üü°Tinkoffüü°')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üü°: *2200700817593386*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / data["rub_course"], 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Alfa')
async def Alfa(callback: CallbackQuery, state:FSMContext, session: AsyncSession):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üî¥ALFAüî¥')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üî¥: *2200150818007889*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / data["rub_course"], 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Vtb')
async def Vtb(callback: CallbackQuery, state:FSMContext, session: AsyncSession):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await state.update_data(bank='üîµ–í–¢–ëüîµ')
    data = await state.get_data()
    golda = int(data['gold'])
    await callback.message.edit_text(f'üí≥*–ö–∞—Ä—Ç–∞*üîµ: *2200246001639031*\n'
                                  f'‚ùóÔ∏è*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: -–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω.–ö.\n'
                                  f'üí∞ *–°—É–º–º–∞*: `{golda}`‚ÇΩ\n'
                                  f'üçØ *–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –Ω–∞—Å*.\n'
                                  f'‚ôªÔ∏è*–í–∞–º –ø—Ä–∏–¥–µ—Ç —Ä–æ–≤–Ω–æ*: *{round(golda / data["rub_course"], 2)}G*\n\n'
                                  f'üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, *–Ω–∞–∂–º–∏—Ç–µ* \n¬´‚úÖ *–Ø –ø–µ—Ä–µ–≤–µ–ª*¬ª',parse_mode='Markdown', reply_markup=kb.Verify)


@router.callback_query(F.data == 'Verify')
async def verify(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.edit_text('üì∏–°–∫–∏–Ω—å—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b>', parse_mode='HTML')
    await callback.message.answer('‚ÅâÔ∏è <b>–í–∞–∂–Ω–æ</b>: –Ω–µ –æ–±—Ä–µ–∑–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –Ω–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ <b>–¥–∞—Ç—É</b>, <b>–≤—Ä–µ–º—è</b> –∏ <b>–ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>.', parse_mode='HTML')
    await state.set_state(standgold.image)


@router.message(standgold.image, F.photo)
async def screen(message:Message, state:FSMContext, bot: Bot, session: AsyncSession):
    await state.update_data(image=message.photo[-1].file_id)
    if message.from_user.username != None:
        await state.update_data(tg_name=message.from_user.username)
    else:
        await state.update_data(tg_name = 'Noname')
    await state.update_data(tg_id = message.from_user.id)
    try:
        data = await state.get_data()
        await orm_order(session, data)
        await message.answer('‚úÖ<b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>', parse_mode='HTML')
        await message.answer('üíµ*–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –∫ –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏*\n(*–¥–æ 24–ß, –Ω–æ –±—ã—á–Ω–æ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ —á–∞—Å*)', parse_mode='Markdown')
        await orm_all_order(session, data)
        for ids in await adm_id(session):
            await bot.send_message(chat_id=ids, text=f'üíµ*–ó–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*', parse_mode='Markdown')
    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        await state.set_state(None)
    await state.clear()
    
    

@router.callback_query(F.data == 'Problem')
async def problem(callback: CallbackQuery):
    await callback.answer('–î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await callback.message.edit_text(f'‚ÅâÔ∏è–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n' 
                                  f'‚ú®–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>,\n'
                                  f'üí°<b>–ù–∞–ø—Ä–∏–º–µ—Ä</b> ¬´‚ö™Ô∏è–°–ë–ü | –î—Ä—É–≥–æ–π –±–∞–Ω–∫¬ª.\n\n'
                                  f'ü´£–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å, <b>–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> ‚§µÔ∏è',parse_mode='HTML', reply_markup=kb.Faq)

@router.callback_query(F.data == 'orders')
async def Order(callback: CallbackQuery):
    await callback.answer('‚úÖ–ó–∞–∫–∞–∑—ã!')
    await callback.message.edit_text('‚úÖ*–í—ã–±–µ—Ä–∏—Ç–∏ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤*', parse_mode='Markdown', reply_markup=kb.type_order)
    
        
@router.callback_query(F.data == 'Rub')
async def Rub_ord(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) >= 1:
        await callback.answer('‚úÖ–ó–∞–∫–∞–∑—ã –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        orders = len(await orm_get_orders(session))
        try:
            if int(orders) != 0 and int(orders) > 0:
                await callback.message.edit_text(f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤* *{orders}* ‚ÅâÔ∏è", parse_mode='Markdown', reply_markup=kb.type_order)
                for order in await orm_get_orders(session):
                    error = len(await orm_get_orders_id(session, order.tg_id))
                    for order_er in await orm_get_orders_id(session, order.tg_id): 
                        if error > 7:
                            await delete_all_order(session, order_er.tg_id)
                            await bot.send_message(chat_id=order_er.tg_id, text='‚ùóÔ∏è*–ó–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞ –±–∞–≥–æ—é–∑*', parse_mode='Markdown')
                            await callback.answer('–ó–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã')
                            await callback.message.answer('‚ùóÔ∏è*–ó–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞ –±–∞–≥–æ—é–∑*', parse_mode='Markdown')
                            break
                        else:
                            await callback.message.answer_photo(
                                order_er.image,
                                caption=f'üíµ*–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*üíµ\n\n'
                                f'üÜî*id*:`@{order_er.tg_name}`\n'
                                f'üí≤*bank*:{order_er.bank}\n'
                                f'üíµ{order_er.price_rub}RUB\n'
                                f'üçØ{round(order_er.price_gold, 2)}\n',
                                parse_mode='Markdown',
                                reply_markup=kb.get_callback_btns(
                                    btns={
                                        "–ü—Ä–∏–Ω—è—Ç—å": f"ok_{order_er.id}",
                                        "–û—Ç–∫–ª–æ–Ω–∏—Ç—å": f"delete_{order_er.id}",
                                    }
                                ),
                            )
                    break
            else:
                await callback.message.delete()
                await callback.message.answer(f'‚ùóÔ∏è*–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç*', parse_mode='Markdown', reply_markup=kb.main_admin)
        except Exception:
            await callback.message.delete()
            await callback.message.answer(f'*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ {orders}* ‚ÅâÔ∏è', parse_mode='Markdown', reply_markup=kb.type_order)
    else:
        await callback.message.delete()
        await callback.answer('–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
        await callback.message.answer('‚ùóÔ∏è*–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º —Å lvl: 1*', parse_mode='Markdown')
        

@router.callback_query(F.data.startswith('ok_'))
async def Ok(callback: CallbackQuery, bot: Bot, state:FSMContext, session: AsyncSession):
    order_id = callback.data.split("_")[-1]
    order_change = await orm_get_order(session, int(order_id))
    standgold.order_change=order_change
    await orm_yes_order(session, order_change)
    await orm_update_balance(session=session, user_tg_id=int(order_change.tg_id), balance=int(order_change.price_rub), balance_gold=round(order_change.price_gold, 2))
    await bot.send_message(chat_id=order_change.tg_id, text=f'‚úÖ*–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç*. \n\n*–≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ*: \nüíµ`{order_change.price_rub}` *RUB* : üçØ*{round(order_change.price_gold, 2)} GOLD*', parse_mode='Markdown')
    await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
    await delete_order(session, int(order_id))
    await callback.message.delete()

@router.callback_query(F.data.startswith("delete_"))
async def delete_ord(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    order_id = callback.data.split("_")[-1]
    order_change = await orm_get_order(session, int(order_id))
    standgold.order_change=order_change
    await bot.send_message(chat_id=order_change.tg_id, text=f'‚ÅâÔ∏è*–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É* `{order_change.price_rub}` *RUB –æ—Ç–∫–ª–æ–Ω—ë–Ω*\n\n*‚ùó–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*', parse_mode='Markdown')
    await delete_order(session, int(order_id))
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)
    await callback.message.delete()
   
@router.callback_query(F.data == 'Gold')
async def Rub_ord(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) >= 2:
        await callback.answer('üçØ–ó–∞–∫–∞–∑—ã –Ω–∞ –í—ã–≤–æ–¥')
        orders = len(await orm_get_orders_gold(session))
        try:
            if int(orders) != 0 and int(orders) > 0:
                await callback.message.edit_text(f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤* *{orders}* ‚ÅâÔ∏è", parse_mode='Markdown', reply_markup=kb.type_order)
                for order in await orm_get_orders_gold(session):
                    error = len(await orm_get_orders_gold_id(session, order.tg_id))
                    for order_er in await orm_get_orders_gold_id(session, order.tg_id):
                        if error > 1:
                            await delete_all_order_gold(session, order_er.tg_id)
                            await bot.send_message(chat_id=order_er.tg_id, text='‚ùóÔ∏è*–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞ –±–∞–≥–æ—é–∑*', parse_mode='Markdown')
                            await callback.answer('–ó–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã')
                            await callback.message.answer('‚ùóÔ∏è*–ó–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –∑–∞ –±–∞–≥–æ—é–∑*', parse_mode='Markdown')
                            break
                        else:
                            await callback.message.answer_photo(
                                order_er.screen_skin,
                                caption= f'üçØ*–í—ã–≤–æ–¥ Gold*\n\n'
                                    f'*id*:`@{order_er.tg_name}`\n'
                                    f'üçØ{round(float(order_er.price_gold) * 1.25, 2)}G\n',
                                parse_mode='Markdown',
                                reply_markup=kb.get_callback_btns(
                                    btns={
                                        "–ü—Ä–∏–Ω—è—Ç—å": f"YesGold_{order_er.id}",
                                       "–û—Ç–∫–ª–æ–Ω–∏—Ç—å": f"NoGold_{order_er.id}"
                                    }
                                ),
                            ) 
                    break
            else:
                await callback.message.delete()
                await callback.message.answer(f'‚ùóÔ∏è*–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç*', parse_mode='Markdown', reply_markup=kb.main_admin)
        except Exception:
            await callback.message.delete()
            await callback.message.answer(f'‚ùóÔ∏è*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ {orders}* ‚ÅâÔ∏è', parse_mode='Markdown', reply_markup=kb.type_order)
    else:
        await callback.message.delete()
        await callback.answer('–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
        await callback.message.answer('‚ùóÔ∏è*–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º —Å lvl: 2*', parse_mode='Markdown')
        
@router.callback_query(F.data.startswith('YesGold_'))
async def Okgold(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    order_id = callback.data.split("_")[-1]
    order_verify = await orm_get_order_gold(session, int(order_id))
    order_golds.order_verify=order_verify.price_gold
    await orm_yes_order_gold(session, order_verify)
    await orm_update_balance_gold(session=session, user_tg_id=int(order_verify.tg_id), balance_gold=order_verify.price_gold, balance=(int(round(float(order_verify.price_gold), 2)*round(float(order_verify.course), 2))))
    await bot.send_message(chat_id=order_verify.tg_id, text=f'‚úÖ*–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞*. \n\n*–° –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ*:üçØ`{round(order_verify.price_gold, 2)}` *GOLD*', parse_mode='Markdown')
    await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
    await delete_order_gold(session, int(order_id))
    await callback.message.delete()

@router.callback_query(F.data.startswith("NoGold_"))
async def Nogold(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    order_id = callback.data.split("_")[-1]
    order_verify = await orm_get_order_gold(session, int(order_id))
    order_golds.order_verify=order_verify
    await bot.send_message(chat_id=order_verify.tg_id, text=f'‚ÅâÔ∏è*–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:* `{round(order_verify.price_gold, 2)}` *GOLD –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n*‚ùó–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*', parse_mode='Markdown')
    await delete_order_gold(session, int(order_id))
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!", show_alert=True)
    await callback.message.delete()

@router.callback_query(F.data == 'subscribes')
async def subscribes(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('‚ùóÔ∏è*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é*', reply_markup=kb.Subscribes, parse_mode='Markdown')

@router.callback_query(F.data == 'bans')
async def bans(callback:CallbackQuery, session: AsyncSession):
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) == 3:
        await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')
        await callback.message.edit_text('*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*', reply_markup=kb.Bans, parse_mode='Markdown')
    else:
        await callback.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await callback.message.edit_text('‚ùóÔ∏è*–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É*', parse_mode='Markdown')

@router.callback_query(F.data == 'ban')
async def baned(callback:CallbackQuery, state: FSMContext):
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*', parse_mode='Markdown')
    await state.set_state(ban.ban)

@router.message(ban.ban, F.text)
async def baned(message:Message, state: FSMContext, session: AsyncSession):
        if await check_name(session, tg_id=message.text) != None:
            await state.update_data(ban = message.text)
            await message.answer('*–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞*', parse_mode='Markdown')
            await state.set_state(ban.what_ban)
        else:
            await message.answer('*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode='Markdown')

@router.message(ban.what_ban, F.text)
async def baned(message:Message, state: FSMContext, session: AsyncSession, bot: Bot):
        data = await state.get_data()
        tg_id = data['ban']
        name = await check_name(session, tg_id=tg_id)
        balance = await user_balance(session, tg_id=tg_id)
        await orm_ban(session, tg_id=tg_id, name=name, balance=balance, what_ban=message.text)
        await delete_user(session, tg_id=tg_id)
        await message.answer('‚ùó*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω*', parse_mode='Markdown')
        await bot.send_message(chat_id=tg_id, text=f'‚ùó*–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: \n{message.text}*', parse_mode='Markdown')
        await state.clear()

@router.callback_query(F.data == 'unban')
async def unbaned(callback:CallbackQuery, state: FSMContext):
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞*', parse_mode='Markdown')
    await state.set_state(ban.unban)

@router.message(ban.unban, F.text)
async def unbaned(message:Message, state: FSMContext, session: AsyncSession, bot: Bot):
    tg_id = message.text
    name = await check_name_ban(session, tg_id=tg_id)
    if name != None:
        balance = await user_balance_ban(session, tg_id=tg_id)
        balance_gold = round(float(balance), 2)
        await delete_ban(session, message.text)
        await orm_add_user(session, tg_id=tg_id, name=name, balance=balance, balance_gold=balance_gold)
        await message.answer('‚ùó*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω*', parse_mode='Markdown')
        await bot.send_message(chat_id=tg_id, text=f'‚ùó*–í—ã —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.\n\n‚ö°–í–∞–º —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –≤ WhiteStore*', parse_mode='Markdown')
        await state.clear()
    else: 
        await message.answer('*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode='Markdown')

@router.callback_query(F.data == 'banned')
async def check_ban_list(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('–ë–∞–Ω—ã')
    banns = len(await check_banned(session))
    await callback.message.edit_text(f'*–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {banns}*', parse_mode='Markdown')
    for banned in await check_banned(session):
        await callback.message.answer(f'*Id*: `{banned.tg_id}`\n'
                                    f'*Name*: `{banned.name}`\n'
                                    f'*Balance*: `{banned.balance}`\n'
                                    f'\n'
                                    f'*–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞*: `{banned.what_ban}`', parse_mode='Markdown')
        
@router.callback_query(F.data == 'sms')
async def sms(callback:CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) == 3:
        await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç')
        await callback.message.edit_text('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ* `—Ñ–æ—Ç–æ` *–∏–ª–∏* `—Ç–µ–∫—Å—Ç` *–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑* `—Ñ–æ—Ç–æ`', parse_mode='Markdown')
        await state.set_state(dialog.sms)
    else:
        await callback.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await callback.message.edit_text('‚ùóÔ∏è*–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É*', parse_mode='Markdown')

@router.message(dialog.sms, F.photo)
async def spam(message: Message, state:FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer('*–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ* `—Ç–µ–∫—Å—Ç` *—Ä–∞—Å—Å—ã–ª–∫–∏*', parse_mode='Markdown')
    await state.set_state(dialog.text)

@router.message(dialog.sms, F.text)
async def spam(message: Message, session: AsyncSession, bot: Bot):
    text = message.text
    try:
        tgid = await Profiles(session=session)
        for i in tgid:
            await bot.send_message(chat_id=i, text=text)
    except Exception:
        pass
    await message.answer('*SMS –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º*', parse_mode='Markdown')

@router.message(dialog.text, F.text)
async def spam_sms(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    text = message.text
    data = await state.get_data()
    try:
        tgid = await Profiles(session=session)
        for i in tgid:
            await bot.send_photo(chat_id=i, photo=data['photo'], caption=text)
    except Exception:
        pass
    await message.answer('*SMS –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º*', parse_mode='Markdown')

@router.callback_query(F.data == 'admins')
async def admins(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) == 3:
        await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ')
        await callback.message.edit_text('*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*',reply_markup=kb.add_del_adm ,parse_mode='Markdown')
        await state.set_state(admin_set.adm_set)
    else:
        await callback.answer('–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
        await callback.message.edit_text('‚ùóÔ∏è*–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ*', parse_mode='Markdown')

@router.callback_query(admin_set.adm_set, F.data == 'adm_add')
async def admins(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ id lvl –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º')
    await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ* `ID LVL NAME` *–Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞*', parse_mode='Markdown')
    await state.set_state(admin_set.add)

@router.message(admin_set.add, F.text)
async def add_adm(message: Message, state: FSMContext, session: AsyncSession):
    try:
        adm = message.text.split(' ')
        await orm_add_admin(session, int(adm[0]),int(adm[1]), str(adm[2]))
        await message.answer('‚úÖ*–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω*', parse_mode='Markdown')
        await state.clear()
    except:
        await message.answer('*–í–≤–µ–¥–∏—Ç–µ ID LVL NAME*', parse_mode='Markdown')


@router.message(admin_set.add, F.text)
async def add_adm(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(add = int(message.text))
    await orm_add_admin(session, int(message.text)) 
    await message.answer('‚úÖ*–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω*', parse_mode='Markdown')
    await state.clear()


@router.callback_query(admin_set.adm_set, F.data == 'adm_del')
async def admins(callback: CallbackQuery, state: FSMContext):
        await callback.answer('–í–≤–µ–¥–∏—Ç–µ id –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å –∞–¥–º–∏–Ω–∫–∏')
        await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–±—Ä–∞—Ç—å*', parse_mode='Markdown')
        await state.set_state(admin_set.delete)
        
@router.message(admin_set.delete, F.text)
async def add_adm(message: Message, state: FSMContext, session: AsyncSession):
    try:
        if await check_adm(session, int(message.text)) != None:
            if int(message.text) != 918212173:
                await delete_admin(session=session, tg_id=int(message.text))
                await message.answer('‚ùóÔ∏è*–ê–¥–º–∏–Ω —É–¥–∞–ª—ë–Ω*', parse_mode='Markdown')
            else:
                await message.answer('‚ùóÔ∏è–≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω')
        else:
            await message.answer('‚ùóÔ∏è*–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode='Markdown')
    except:
        await message.answer('‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*',parse_mode='Markdown')


@router.callback_query(admin_set.adm_set, F.data == 'adm_list')
async def admins_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        await callback.message.delete()
        await callback.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤')
        ids_adm = len(await adm_list(session))
        for admins in await adm_list(session):
            await callback.message.answer(f'*–ê–¥–º–∏–Ω*: `{admins.id}`\n'
                                        f'*ID*: `{admins.tg_id}`\n'
                                        f'*LVL*: `{admins.lvl}`\n'
                                        f'*NAME*: `{admins.name}`\n', parse_mode='Markdown')
        await callback.message.answer(f'*–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤*: `{ids_adm}`', parse_mode='Markdown')

@router.callback_query(F.data == 'bonus')
async def bonused(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) == 3:
        await state.set_state(bonus.users)
        await callback.answer()
        await callback.message.edit_text('‚ùóÔ∏è*–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*', parse_mode='Markdown')
    else: 
        await callback.answer()
        await callback.message.edit_text('‚ùóÔ∏è*–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É*', parse_mode='Markdown')

@router.message(bonus.users, F.text)
async def bonus_user(message: Message, state: FSMContext):
    await state.update_data(users = message.text)
    await message.answer('‚ùóÔ∏è*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞*', parse_mode='Markdown')
    await state.set_state(bonus.give)

@router.message(bonus.give, F.text)
async def bonus_give(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    sender_bonus = data['users']
    price = int(message.text) / int(sender_bonus)
    try:
        Users = await Profiles(session)
        bonuse_id = random.sample(population=Users, k=int(sender_bonus))
        for id in bonuse_id:
            name = await check_name(session, id)
            await message.answer(f'*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å*\n*id*: `{id}`\n*–ò–º—è*: `{name}`\n\n *–°—É–º–º–∞*: `{price}`', parse_mode='Markdown')
            await orm_update_balance(session=session, user_tg_id=id, balance=(price * await orm_check_course(session)))
            await bot.send_message(chat_id=id, text=f'üéÅ*–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ*\n\n*–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ*: `{price}`G', parse_mode='Markdown')
    except Exception:
        await message.answer('‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\nüí°*–í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –∏–º–µ–µ—Ç—Å—è*', parse_mode='Markdown')
   
@router.callback_query(F.data == 'static')
async def static(callback: CallbackQuery, session: AsyncSession):
    all_users = await user_list(session)
    all_order = await orm_get_all_orders(session)
    yes_order = await orm_get_yes_orders(session)
    all_order_gold = await orm_all_orders_gold(session)
    yes_order_gold = await orm_yes_orders_gold(session)
    await callback.answer()
    await callback.message.edit_text(f'‚ùóÔ∏è*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* `{len(all_users)}`\n\n'
                                     f'üåü*–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤*: `{len(all_order)}`\n'
                                     f'‚úÖ*–ü—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤*: `{len(yes_order)}`\n'
                                     f'üö´*–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤*: `{len(all_order) - len(yes_order)}`\n\n'
                                     f'üåü*–í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤*: `{len(all_order_gold)}`\n'
                                     f'‚úÖ*–ü—Ä–∏–Ω—è—Ç—ã—Ö –≤—ã–≤–æ–¥–æ–≤*: `{len(yes_order_gold)}`\n'
                                     f'üö´*–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤*: `{len(all_order_gold) - len(yes_order_gold)}`', parse_mode='Markdown')

@router.callback_query(F.data == 'course')
async def new_course(callback: CallbackQuery, state: FSMContext, session:AsyncSession):
    await callback.answer()
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) == 3:
        try:
            await orm_add_course(session=session, course=0.75)
            await callback.message.edit_text(f'üöÄ*–°–µ–π—á–∞—Å –∫—É—Ä—Å* `{round(await orm_check_course(session), 2)}`', parse_mode='Markdown')
            await callback.message.answer('‚ùóÔ∏è*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å*', parse_mode='Markdown')
            await state.set_state(course.new)
        except Exception:
            await callback.message.answer('‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*', parse_mode='Markdown')
    else:
        await callback.message.edit_text(f'‚ùóÔ∏è*–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ*', parse_mode='Markdown')

@router.message(course.new, F.text)
async def new_cours(message: Message, state: FSMContext, session: AsyncSession):
    try:
        if float(message.text) > 0 and float(message.text) < 10:
            await orm_update_course(session, float(message.text))
            await message.answer(f'‚úÖ*–ö—É—Ä—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞* `{message.text}`', parse_mode='Markdown')
            await state.clear()
        else:
            await message.answer('‚ùóÔ∏è*–ö—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω*', parse_mode='Markdown')
    except Exception:
        await message.answer('‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*', parse_mode='Markdown')

@router.callback_query(F.data == 'skin')
async def skins(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer()
    if callback.from_user.id == int(os.getenv('ADMIN')) or await check_lvl(session, callback.from_user.id) == 3:
        try:
            await orm_add_skin(session=session, skin='SM1014 "Serpent"', skin_screen='AgACAgIAAxkBAAICZWbDHViCVzfpfS8uvs0S4GxSfroEAAKl4jEbZI8ZSpMpKGY9ybRyAQADAgADeQADNQQ')
            await callback.message.edit_text(f'üöÄ*–°–µ–π—á–∞—Å —Å–∫–∏–Ω*: `{await orm_check_skin(session)}`', parse_mode='Markdown')
            await callback.message.answer('‚ùóÔ∏è*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫–∏–Ω*', parse_mode='Markdown')
            await state.set_state(Change_skin.new_skin)
        except Exception:
            await callback.message.answer('‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*', parse_mode='Markdown')
    else:
        await callback.message.edit_text(f'‚ùóÔ∏è*–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ*', parse_mode='Markdown')

@router.message(Change_skin.new_skin, F.text)
async def new_cours(message: Message, state: FSMContext):
    try:
        await state.update_data(new_skin = message.text)
        await message.answer(f'‚úÖ*–°–∫–∏–Ω –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞* `{message.text}`\n\n‚ùóÔ∏è*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–∏–Ω–∞*', parse_mode='Markdown')
        await state.set_state(Change_skin.skin_screen)
    except Exception:
        await message.answer('‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*', parse_mode='Markdown')

@router.message(Change_skin.skin_screen, F.photo)
async def skin_screen(message: Message, state: FSMContext, session:AsyncSession):
    try:
        data = await state.get_data()
        skin = data['new_skin']
        skin_screen = message.photo[-1].file_id
        await orm_update_skin(session, skin=skin, skin_screen=skin_screen)
        await message.answer(f'‚úÖ*–°–∫–∏–Ω*: `{skin}` *—Å–æ—Ö—Ä–∞–Ω—ë–Ω*', parse_mode='Markdown')
        await state.clear()
    except Exception:
        await message.answer('‚ùóÔ∏è*–û—à–∏–±–∫–∞*', parse_mode='Markdown')

@router.message()
async def send_echo(message: Message):
    await message.answer(f'ü§ñ*—è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ\n /start*', parse_mode='Markdown')

